
import java.awt.Component;
import java.awt.Container;
import java.awt.GridLayout;
import java.awt.Point;
import java.awt.event.FocusEvent;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.sql.ResultSet;
import java.sql.Statement;
import javax.swing.JComboBox;
import javax.swing.JFormattedTextField;
import javax.swing.JLabel;
import javax.swing.JMenuItem;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JPopupMenu;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.ListSelectionModel;
import javax.swing.RowFilter;
import javax.swing.SpinnerNumberModel;
import javax.swing.UIManager;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;
import javax.swing.table.TableRowSorter;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author Cliff Anthony C. Daus
 */
public class MainForm extends javax.swing.JFrame {

    /**
     * Creates new form MainForm
     */

    public MainForm() {
        setOrderTableModel();
        setMenuTableModel();
        initComponents();
        jButton3.setName(""+1);
        
        //OrderTable Event
        ListSelectionModel model=orderTable.getSelectionModel();
        model.addListSelectionListener(new ListSelectionListener(){
            @Override
            public void valueChanged(ListSelectionEvent e) {
                if(!model.isSelectionEmpty()){
                    try{
                        //int selectedRow=model.getMinSelectionIndex();
                        //int orderid=Integer.parseInt(orderTable.getValueAt(selectedRow, 1).toString());
                        //String orderDetailsQry="SELECT product.name as 'Description', quantity as 'Qty', unitPrice as 'Unit Price', quantity*unitPrice as 'Subtotal' FROM kendb.order_details inner join product on product.productId=order_details.product_productId where orders_idorder = "+orderid+";";
                        setOrderDetailsTableModel();
                    }catch(Exception x){
                        JOptionPane.showMessageDialog(rootPane, x);
                    }
                }; //To change body of generated methods, choose Tools | Templates.
            }
            
        });
        
        //MenuTable Event
        menuTable.addMouseListener(new MouseAdapter() {
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table =(JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                String item=menuTable.getValueAt(row, 0).toString();
                if (mouseEvent.getClickCount() == 2) {
                    showAddItem(item,menuTable.getValueAt(row, 2).toString());
                }
            }
        });
        
        orderDetailsTable.addMouseListener(new MouseAdapter(){
            public void mousePressed(MouseEvent mouseEvent) {
                JTable table =(JTable) mouseEvent.getSource();
                Point point = mouseEvent.getPoint();
                int row = table.rowAtPoint(point);
                String item=orderDetailsTable.getValueAt(row, 0).toString();
                if (mouseEvent.getClickCount() == 2) {
                    showEditItem(item);
                }
            }
        });
        setTableLook();
        setMenuTableLook();
        //setExtendedState(java.awt.Frame.MAXIMIZED_BOTH);
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        menuPanel = new javax.swing.JTabbedPane();
        jPanel8 = new javax.swing.JPanel();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jPanel7 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jPanel11 = new javax.swing.JPanel();
        jPanel12 = new javax.swing.JPanel();
        jPanel13 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        jPanel16 = new javax.swing.JPanel();
        jDineInScrollPane = new javax.swing.JScrollPane();
        orderTable = new javax.swing.JTable();
        orderControlPanel = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        orderDetailsTable = new javax.swing.JTable();
        summaryPanel = new javax.swing.JPanel();
        jButton6 = new javax.swing.JButton();
        Total = new javax.swing.JFormattedTextField();
        jPanel1 = new javax.swing.JPanel();
        filterTextField = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        menuTable = new javax.swing.JTable();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();

        menuPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu"));
        menuPanel.setToolTipText("");
        menuPanel.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N

        jButton3.setText("Chicken Inasal");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setText("Grilled Baby Back Ribs");

        jButton5.setText("Grilled Pork Belly");

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 154, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 57, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 59, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(245, Short.MAX_VALUE))
        );

        menuPanel.addTab("Rice All You Can", jPanel8);

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Appetizers", jPanel7);

        javax.swing.GroupLayout jPanel10Layout = new javax.swing.GroupLayout(jPanel10);
        jPanel10.setLayout(jPanel10Layout);
        jPanel10Layout.setHorizontalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel10Layout.setVerticalGroup(
            jPanel10Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Short Order", jPanel10);

        javax.swing.GroupLayout jPanel11Layout = new javax.swing.GroupLayout(jPanel11);
        jPanel11.setLayout(jPanel11Layout);
        jPanel11Layout.setHorizontalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel11Layout.setVerticalGroup(
            jPanel11Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Pork Specialties", jPanel11);

        javax.swing.GroupLayout jPanel12Layout = new javax.swing.GroupLayout(jPanel12);
        jPanel12.setLayout(jPanel12Layout);
        jPanel12Layout.setHorizontalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel12Layout.setVerticalGroup(
            jPanel12Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Soup", jPanel12);

        javax.swing.GroupLayout jPanel13Layout = new javax.swing.GroupLayout(jPanel13);
        jPanel13.setLayout(jPanel13Layout);
        jPanel13Layout.setHorizontalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel13Layout.setVerticalGroup(
            jPanel13Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Fish", jPanel13);

        javax.swing.GroupLayout jPanel14Layout = new javax.swing.GroupLayout(jPanel14);
        jPanel14.setLayout(jPanel14Layout);
        jPanel14Layout.setHorizontalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel14Layout.setVerticalGroup(
            jPanel14Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Dessert", jPanel14);

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Drinks", jPanel15);

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 507, Short.MAX_VALUE)
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        menuPanel.addTab("Home Made Fresh Juice", jPanel16);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(1366, 748));
        setMinimumSize(new java.awt.Dimension(1366, 748));
        setUndecorated(true);

        jDineInScrollPane.setBorder(javax.swing.BorderFactory.createTitledBorder("Orders"));
        jDineInScrollPane.setMaximumSize(new java.awt.Dimension(400, 637));

        orderTable.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        orderTable.setModel(orderTableModel);
        orderTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        orderTable.setAutoscrolls(false);
        orderTable.setRowHeight(60);
        orderTable.setDefaultEditor(Object.class, null);
        orderTable.getTableHeader().setReorderingAllowed(false);
        jDineInScrollPane.setViewportView(orderTable);

        orderControlPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("New Order"));

        jButton1.setText("New Customer");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Close Order");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout orderControlPanelLayout = new javax.swing.GroupLayout(orderControlPanel);
        orderControlPanel.setLayout(orderControlPanelLayout);
        orderControlPanelLayout.setHorizontalGroup(
            orderControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(orderControlPanelLayout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 185, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, 190, Short.MAX_VALUE)
                .addContainerGap())
        );
        orderControlPanelLayout.setVerticalGroup(
            orderControlPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 66, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jButton2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jScrollPane2.setBorder(javax.swing.BorderFactory.createTitledBorder("Details"));

        orderDetailsTable.setModel(orderDetailsTableModel);
        orderDetailsTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        orderDetailsTable.setAutoscrolls(false);
        orderDetailsTable.setDefaultEditor(Object.class, null);
        orderDetailsTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane2.setViewportView(orderDetailsTable);

        summaryPanel.setBorder(javax.swing.BorderFactory.createTitledBorder("Summary"));

        jButton6.setText("Pay");
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        Total.setEditable(false);
        Total.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.NumberFormatter(new java.text.DecimalFormat("¤ #,##0.00;(¤#,##0.00)"))));
        Total.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        Total.setFont(new java.awt.Font("Tahoma", 1, 36)); // NOI18N

        javax.swing.GroupLayout summaryPanelLayout = new javax.swing.GroupLayout(summaryPanel);
        summaryPanel.setLayout(summaryPanelLayout);
        summaryPanelLayout.setHorizontalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(summaryPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(Total))
                .addContainerGap())
        );
        summaryPanelLayout.setVerticalGroup(
            summaryPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, summaryPanelLayout.createSequentialGroup()
                .addComponent(Total, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(56, 56, 56)
                .addComponent(jButton6, javax.swing.GroupLayout.DEFAULT_SIZE, 81, Short.MAX_VALUE))
        );

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Menu"));

        filterTextField.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        filterTextField.setToolTipText("Search");
        filterTextField.setBorder(javax.swing.BorderFactory.createTitledBorder("Search"));
        filterTextField.addCaretListener(new javax.swing.event.CaretListener() {
            public void caretUpdate(javax.swing.event.CaretEvent evt) {
                filterTextFieldCaretUpdate(evt);
            }
        });

        jScrollPane1.setBorder(null);

        menuTable.setFont(new java.awt.Font("Tahoma", 1, 14));
        menuTable.setRowHeight(60);
        menuTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
        menuTable.setDefaultEditor(Object.class, null);
        menuTable.setModel(menuTableModel);
        menuTable.setAutoscrolls(false);
        menuTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jScrollPane1.setViewportView(menuTable);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 473, Short.MAX_VALUE)
            .addComponent(filterTextField)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addComponent(filterTextField)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 605, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jMenu1.setText("User");

        jMenuItem1.setText("Logout");
        jMenu1.add(jMenuItem1);

        jMenuItem2.setText("Exit");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Admin");
        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jDineInScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                    .addComponent(orderControlPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane2)
                    .addComponent(summaryPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jDineInScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 638, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(orderControlPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addGroup(layout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(summaryPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        // TODO add your handling code here:
        //JOptionPane.showMessageDialog(rootPane, jButton3.getName());
        //addProductPanel pp=new addProductPanel();
        SpinnerNumberModel Model=new SpinnerNumberModel(1,1,999,1);
        JSpinner spinner1 = new JSpinner(Model);
        spinner1.setFont(new java.awt.Font("Dialog", 1, 24));
        int choice=JOptionPane.showConfirmDialog(rootPane, spinner1);
        if(choice==JOptionPane.OK_OPTION){
            //insertOrderDetails(getProductId(),Integer.parseInt(spinner1.getValue().toString()));
        }
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        openNewOrderDialog();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        // TODO add your handling code here:
        closeOrder();
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jButton6ActionPerformed

    private void filterTextFieldCaretUpdate(javax.swing.event.CaretEvent evt) {//GEN-FIRST:event_filterTextFieldCaretUpdate
        // TODO add your handling code here:
        TableRowSorter<TableModel> sorter = new TableRowSorter<TableModel>(((DefaultTableModel) menuTable.getModel())); 
        sorter.setRowFilter(RowFilter.regexFilter("(?i)"+filterTextField.getText()));

        menuTable.setRowSorter(sorter);
    }//GEN-LAST:event_filterTextFieldCaretUpdate

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                MainForm mf=new MainForm();
                //mf.setUndecorated(true);
                mf.setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JFormattedTextField Total;
    private javax.swing.JTextField filterTextField;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JScrollPane jDineInScrollPane;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTabbedPane menuPanel;
    private javax.swing.JTable menuTable;
    private javax.swing.JPanel orderControlPanel;
    private javax.swing.JTable orderDetailsTable;
    private javax.swing.JTable orderTable;
    private javax.swing.JPanel summaryPanel;
    // End of variables declaration//GEN-END:variables

    Driver d=new Driver();
    Statement s=d.getStatement();
    DefaultTableModel orderTableModel = new DefaultTableModel();
    DefaultTableModel orderDetailsTableModel= new DefaultTableModel();
    DefaultTableModel menuTableModel=new DefaultTableModel();
    String userid,username;
    int q;
    Methods m=new Methods();
    String orderQry="select orders.table as 'Table',idorder as 'Order ID',orders.customer_name as 'Customer',"
                    + "order_status.description as 'Status' "
                    + "from orders inner join order_status "
                    + "on orders.order_status_idorder_status=order_status.idorder_status "
                    + "where orders.order_status_idorder_status!=3;";
    
    String availableTableQry="select tables.idtable from tables "
                + "where idtable not in (SELECT orders.table from orders where order_status_idorder_status!=3);";
    JPopupMenu popup;
    JMenuItem menuItem;
    String[] menu;
    
    public void setOrderTableModel(){
        ResultSet rs=getResultSet(orderQry);
        orderTableModel.setDataVector(m.getData(rs), m.getColumnNames(rs));
    }
    
    public void setMenuTableModel(){
        ResultSet rs=getResultSet("select product.name as 'Description',category.name ,pricePerUnit as 'Price' from product inner join category on category.idcategory=product.category_idcategory order by category.name");
        menuTableModel.setDataVector(m.getData(rs), m.getColumnNames(rs));
    }
    
    public void setMenuTableLook(){
        menuTable.getColumnModel().getColumn(0).setPreferredWidth(180);
        menuTable.getColumnModel().getColumn(1).setPreferredWidth(70);
        menuTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        menuTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
    }
    
    public void setTableLook(){
        orderTable.getColumnModel().getColumn(0).setPreferredWidth(50);
        orderTable.getColumnModel().getColumn(1).setPreferredWidth(50);
        orderTable.getColumnModel().getColumn(2).setPreferredWidth(100);
        orderTable.getColumnModel().getColumn(3).setPreferredWidth(30);
    }
    
    public void setOrderDetailsTableModel(){
        ResultSet rs=getResultSet("SELECT product.name as 'Description', quantity as 'Qty', unitPrice as 'Unit Price', quantity*unitPrice as 'Subtotal' FROM kendb.order_details inner join product on product.productId=order_details.product_productId where orders_idorder = "+getOrderId()+";");
        orderDetailsTableModel.setDataVector(m.getData(rs), m.getColumnNames(rs));
        setDetailsTableLook();
        setSummary();
    }
    
    public ResultSet getResultSet(String qry){
        ResultSet rs=null;
        try{
            //Statement stmt = d.getStatement();
            rs = s.executeQuery(qry);
        }catch (Exception e) {
            JOptionPane.showMessageDialog(rootPane, e);
        }
        return rs;
    }
    
    {//    public int getQueueNumber(){
//        //q=Integer.parseInt(orderTable.getValueAt(orderTable.getRowCount()-1, 0).toString());
//        return q++;
//    }
//    
//    public void initQueueNumber(){
//        String qry="select orders.queue from orders where idorder=(select max(idorder) from orders);";        
//        try{
//            Statement stmt = d.getStatement();
//            ResultSet rs = stmt.executeQuery(qry);
//            if(rs.next()){
//                //JOptionPane.showMessageDialog(rootPane, rs.getInt(1));
//                q=rs.getInt(1);
//                //qLabel.setText("Queue: ");
//            }
//            }catch (Exception e) {
//                JOptionPane.showMessageDialog(rootPane, e);
//            }
//    }
    }
    
    public int getOrderId(){
        int index = Integer.parseInt(orderTable.getValueAt(orderTable.getSelectedRow(), 1).toString());
        return index;
    }
    
    public String getProductId(String item){
        String id="";
        try{
            String qry="SELECT productId FROM kendb.product where name = '"+item+"';";
            ResultSet rs=s.executeQuery(qry);
            if(rs.next())
                id=rs.getString(1);
        }
        catch(Exception e){
            
        }
        return id;
    }
    
    public int getQty(){
        int qty=1;
        return qty;
    }
    
    public String insertOrderDetails(String productId,int qty){
        String qry="INSERT INTO `kendb`.`order_details` "
                + "(`orders_idorder`, `product_productId`, `quantity`, `unitPrice`, `order_details_status_idorder_details_status`) "
                + "VALUES ('"+getOrderId()+"', '"+productId+"', '"+qty+"', '"+getUnitPrice(productId)+"', '1');";       
        return qry;
    }
    
    public int getUnitPrice(String productId){
        int unitPrice=0;//get price from DB
        return unitPrice;
    }
    
    
    
    public void newOrder(String customer,String table){
        try{
            s.execute("INSERT INTO `kendb`.`orders` (`orderDate`, `accounts_employee_employeeId`, `order_status_idorder_status`, `table`, `customer_name`) "
                    + "VALUES (NOW(), '"+userid+"', '1', '"+table+"', '"+customer+"');");
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
        }
        selectNewOrder();
    }
    
    public void newOrder(String customer){
        try{
            s.execute("INSERT INTO `kendb`.`orders` (`orderDate`, `accounts_employee_employeeId`, `order_status_idorder_status`, `customer_name`) "
                    + "VALUES (NOW(), '"+userid+"', '1', '"+customer+"');");
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
        }
        selectNewOrder();
    }
    
    public void closeOrder(){
        //int orderid=Integer.parseInt(orderTable.getValueAt(orderTable.getSelectedRow(), 1).toString());
        if(orderTable.getSelectedRow()!=-1){
            if(orderTable.getValueAt(orderTable.getSelectedRow(), 3).toString().contains("Unpaid")){
                showPayDialog();
            }else{
                showCloseDialog();
            }
        }
    }
        
    public void setUser(String id,String name){
        userid=id;
        username=name;
    }

    private void setDetailsTableLook() {
        orderDetailsTable.getColumnModel().getColumn(0).setPreferredWidth(100);
        orderDetailsTable.getColumnModel().getColumn(1).setPreferredWidth(20);
        orderDetailsTable.getColumnModel().getColumn(2).setPreferredWidth(20);
        orderDetailsTable.getColumnModel().getColumn(3).setPreferredWidth(20);
        
        DefaultTableCellRenderer rightRenderer = new DefaultTableCellRenderer();
        rightRenderer.setHorizontalAlignment(JLabel.RIGHT);
        orderDetailsTable.getColumnModel().getColumn(1).setCellRenderer(rightRenderer);
        orderDetailsTable.getColumnModel().getColumn(2).setCellRenderer(rightRenderer);
        orderDetailsTable.getColumnModel().getColumn(3).setCellRenderer(rightRenderer);
    }

    private void openNewOrderDialog() {
        //NewJPanel n=new NewJPanel();
        AddCustomer n=new AddCustomer();
        Component[] c=n.getComponents();
        
        //String t;
        ResultSet rs=getResultSet(availableTableQry);
        ((JComboBox)c[1]).addItem("Take Out");
        try{
            while(rs.next()){                            
                ((JComboBox)c[1]).addItem(rs.getString(1));
            }
            int choice=JOptionPane.showConfirmDialog(rootPane, n,"New Order",JOptionPane.OK_CANCEL_OPTION);
            if(choice==JOptionPane.OK_OPTION){
                String cname=((JTextField)c[0]).getText();
                String table=((JComboBox)c[1]).getSelectedItem().toString();
                newOrder(cname,table);
            }
        }catch(Exception e){
            JOptionPane.showMessageDialog(rootPane, e);
        }
        
    }

    private void showCloseDialog() {
        
        int choice=JOptionPane.showConfirmDialog(rootPane, "Close Order?", "", JOptionPane.YES_NO_OPTION, JOptionPane.QUESTION_MESSAGE);
        if(choice==JOptionPane.YES_OPTION){
           String qry="UPDATE `kendb`.`orders` SET `order_status_idorder_status`='3' WHERE `idorder`='"+getOrderId()+"'";
            try{
                s.execute(qry);
            }catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, e);
            }
            setOrderTableModel();
        }
        
    }

    private void showPayDialog() {
        JOptionPane.showConfirmDialog(rootPane, username, "Payment", JOptionPane.OK_CANCEL_OPTION,0);
    }
    
    private void setSummary() {
        //Total.setText(""+getTotal());
        Total.setValue(getTotal());
    }

    private int getNetTotal() {
        int net=0;
        return net;
    }

    private int getDiscount() {
        int discount=0;
        return discount;
    }

    private double getTotal() {
       double total=0;
       ResultSet rs;
       try{
            rs=s.executeQuery("select sum(quantity*unitPrice) as 'Net Total' from order_details where orders_idorder="+orderTable.getValueAt(orderTable.getSelectedRow(), 1)+";");
            if(rs.next())    
                total=rs.getDouble(1);
            }catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, e);
            }
       return total;
    }
    
    private void showAddItem(String item,String unitPrice) {
        AddItem ai=new AddItem();
        Component[] c=ai.getComponents();
        String qry="";
        ((JLabel)c[0]).setText(item);
        if(itemExists(item)){
            int qty=getExistingQty(getOrderId(),getProductId(item));
            //JOptionPane.showMessageDialog(rootPane, item+"\nItem already exist's!\n"+qty);
            int choice=JOptionPane.showConfirmDialog(rootPane, ai,"Add Item",JOptionPane.OK_CANCEL_OPTION);
            if(choice==JOptionPane.YES_OPTION){
                if(!((JFormattedTextField)c[1]).getValue().equals(0)){
                    qty=qty+Integer.parseInt(((JFormattedTextField)c[1]).getValue().toString());       
                    qry="UPDATE `kendb`.`order_details` SET `quantity`='"+qty
                            +"' WHERE `orders_idorder`='"+getOrderId()+"' and`product_productId`='"+getProductId(item)+"'";
                    try{
                        s.execute(qry);
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(rootPane, e.getMessage());
                    }
                    setOrderDetailsTableModel();
                }    
            }
        }
        else{
            int choice=JOptionPane.showConfirmDialog(rootPane, ai,"Add Item",JOptionPane.OK_CANCEL_OPTION);
            if(choice==JOptionPane.YES_OPTION){
                if(!((JFormattedTextField)c[1]).getValue().equals(0)){
                    qry="INSERT INTO `kendb`.`order_details` "
                            + "(`orders_idorder`, `product_productId`, `quantity`, `unitPrice`, `order_details_status_idorder_details_status`) "
                            + "VALUES ('"+getOrderId()+"', '"+getProductId(item)+"', '"+((JFormattedTextField)c[1]).getValue()+"', '"+unitPrice+"', '1');";
                    try{
                        s.execute(qry);
                    }catch(Exception e){
                        JOptionPane.showMessageDialog(rootPane, e.getMessage());
                    }
                    setOrderDetailsTableModel();
                }
            }
        }
    }

    private void selectNewOrder() {
        setOrderTableModel();
        orderTable.setRowSelectionInterval(orderTable.getRowCount()-1, orderTable.getRowCount()-1);
    }

    private boolean itemExists(String item) {
        int row=0;
        while(row<orderDetailsTable.getRowCount()){
            if(item.equalsIgnoreCase(orderDetailsTable.getValueAt(row, 0).toString()))
                return true;
            row++;
        }
        return false;
    }

    private int getExistingQty(int orderId,String id) {
        int qty=0;
        try{
            String qry="SELECT quantity FROM kendb.order_details where orders_idorder="+orderId+" and product_productId="+id+";";
            ResultSet rs=s.executeQuery(qry);
            if(rs.next())
                qty=rs.getInt(1);
        }
        catch(Exception e){
            
        }
        return qty;
    }
    
    private void showEditItem(String item) {
        AddItem ai=new AddItem();
        Component[] c=ai.getComponents();
        String qry="";
        ((JLabel)c[0]).setText(item);

        int qty=getExistingQty(getOrderId(),getProductId(item));

        ((JFormattedTextField)c[1]).setValue(qty);
        int choice=JOptionPane.showConfirmDialog(rootPane, ai,"Add Item",JOptionPane.OK_CANCEL_OPTION);
        if(choice==JOptionPane.YES_OPTION){
            //qty=qty+Integer.parseInt(((JFormattedTextField)c[1]).getValue().toString());   
            if(!((JFormattedTextField)c[1]).getValue().equals(0)){
                qry="UPDATE `kendb`.`order_details` SET `quantity`='"+((JFormattedTextField)c[1]).getValue()
                        +"' WHERE `orders_idorder`='"+getOrderId()+"' and`product_productId`='"+getProductId(item)+"'";
                
            }else{
                qry="DELETE FROM `kendb`.`order_details` WHERE `orders_idorder`='"+getOrderId()+"' and`product_productId`='"+getProductId(item)+"';";
            }
            try{
                s.execute(qry);
            }catch(Exception e){
                JOptionPane.showMessageDialog(rootPane, e.getMessage());
            }
            setOrderDetailsTableModel();
        }
    }
    
}
